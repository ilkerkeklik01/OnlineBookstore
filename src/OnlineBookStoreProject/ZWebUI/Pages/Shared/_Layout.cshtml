@{
    Layout = null; // Sayfanın kendi içeriğini kullanacağını belirtiyoruz
}

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
        <meta name="Online Bookstore Web Application" content="" />
        <meta name="Ilker Keklik" content="" />
        <title>Homepage</title>
        <!-- Favicon-->
        <link rel="icon" type="image/x-icon" href="assets/favicon.ico" />
        <!-- Bootstrap icons-->
        <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css" rel="stylesheet" />
        <!-- Core theme CSS (includes Bootstrap)-->
        <link href="/css/styles.css" rel="stylesheet" />
    
    </head>
    <body>
        <!-- Navigation-->
        <nav class="navbar navbar-expand-lg navbar-light bg-light">
            <div class="container px-4 px-lg-5">
                <a class="navbar-brand" href="#!">Start Bootstrap</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation"><span class="navbar-toggler-icon"></span></button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav me-auto mb-2 mb-lg-0 ms-lg-4">
                        <li class="nav-item"><a class="nav-link active" aria-current="page" href="#!">Home</a></li>
                        <li class="nav-item"><a class="nav-link" href="#!">About</a></li>
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" id="navbarDropdown" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">Shop</a>
                            <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                                <li><a class="dropdown-item" href="#!">All Products</a></li>
                                <li><hr class="dropdown-divider" /></li>
                                <li><a class="dropdown-item" href="#!">Popular Items</a></li>
                                <li><a class="dropdown-item" href="#!">New Arrivals</a></li>
                            </ul>
                        </li>
                    </ul>
                    <form class="d-flex">
                        
                        
                        <a id="cart-link" class="btn btn-outline-dark" href="/Home/ShoppingCart">
                            <i class="bi-cart-fill me-1"></i>
                            Cart
                            <span class="badge bg-dark text-white ms-1 rounded-pill">0</span>
                        </a>
                        
                        

                    </form>
                </div>
            </div>
        </nav>
        <!-- Header-->
        <header class="bg-dark py-5">
            <div class="container px-4 px-lg-5 my-5">
                <div class="text-center text-white">
                    <h1 class="display-4 fw-bolder">Shop in style</h1>
                    <p class="lead fw-normal text-white-50 mb-0">Enjoy Shopping</p>
                </div>
            </div>
        </header>
        <!-- Section-->
        <section class="py-5">
            <div class="container px-4 px-lg-5 mt-5">
                <div class="row gx-4 gx-lg-5 row-cols-2 row-cols-md-3 row-cols-xl-4 justify-content-center">
                    
                    


                    
                </div>
            </div>
        </section>
        <!-- Footer-->
        <footer class="py-5 bg-dark">
            <div class="container"><p class="m-0 text-center text-white">Copyright &copy; Online Bookstore</p></div>
        </footer>
        
        
    
    
    
    
    <script>
        // Fetch book data from your API
        function fetchBooks() {
            // 'http://localhost:5093/api/Books/getlist?PageRequest.Page=0&PageRequest.PageSize=10'
            fetch('http://localhost:8080/api/Books/getlist?PageRequest.Page=0&PageRequest.PageSize=10')
                .then(response => response.json())
                .then(data => generateBookCards(data.items))
                .catch(error => console.error('Error fetching data:', error));
        }

        // Generate book cards dynamically
        function generateBookCards(books) {
            const bookSection = document.querySelector('.row-cols-2'); // Replace with appropriate selector
            bookSection.innerHTML = ''; // Clear existing content

            books.forEach(book => {
                const bookCard = document.createElement('div');
                bookCard.classList.add('col', 'mb-5');
                bookCard.innerHTML = `
                    <div class="card h-100">
                        <!-- Book cover image -->
                        <img class="card-img-top" src="${book.coverImagePath}" alt="Book Cover" />
                        <!-- Book details -->
                        <div class="card-body p-4">
                            <div class="text-center">
                                <!-- Book title -->
                                <h5 class="fw-bolder">${book.title}</h5>
                                <!-- Book author -->
                                <p>Author: ${book.author}</p>
                            </div>
                        </div>
                        <!-- Book actions -->
                        <div class="card-footer p-4 pt-0 border-top-0 bg-transparent">
                            <div class="text-center">
                                <!-- View details button -->
                                        <a class="btn btn-outline-dark mt-auto view-details-btn" data-book-id="${book.id}" href="#">View Details</a>
                            </div>
                            <div class="text-center mt-2"> <!-- Add this div for the "Add to Cart" button -->
                                <!-- Add to cart button -->
                                                <a class="btn btn-outline-dark add-to-cart-btn" data-book-id="${book.id}" href="#">Add to Cart</a>
                            </div>      
                        </div>
                    </div>
                `;
                bookSection.appendChild(bookCard);

                // Ana sayfada kullanıcı kimliğini session storage'dan al
                const userId = sessionStorage.getItem('userId');


                const viewDetailsButtons = document.querySelectorAll('.view-details-btn');
                viewDetailsButtons.forEach(button => { 
                    button.addEventListener('click', handleViewDetails);
                });

                // Handle "Add to Cart" button click
                const addToCartButtons = document.querySelectorAll('.add-to-cart-btn');
                addToCartButtons.forEach(button => {
                     button.addEventListener('click', handleAddToCart);
                });

                // Handle "View Details" button click event
                function handleViewDetails(event) {
                    const bookId = event.target.getAttribute('data-book-id');
                    // Now you have the book ID to handle the details view
                    alert(`View details for book with ID: ${bookId}`);

                    viewDetailsClicked(bookId);
                }

                // Handle "Add to Cart" button click event
               async function handleAddToCart(event) {
                    

                    const bookId = event.target.getAttribute('data-book-id');
                   

                    
                        await addToCart(bookId, userId); 
                        
                    
                   
                }
                
               
            });

        }
        // Inside your script (outside of the generateBookCards function)
        let isAddedToCart = false;
         async function  addToCart(bookId, userId) {
            if (isAddedToCart) {
                return; // Eğer işlem hala devam ediyorsa, yeni bir işlemi engelle
            }
            isAddedToCart = true;

             try {
                // Implement your logic to add the book to the cart here
                // You can now use both bookId and userId to make API requests or perform other actions
                //'http://localhost:5093/api/OrderItems/add'
                 let check = false;
                await fetch('http://localhost:8080/api/OrderItems/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        userId: userId,
                        bookId: bookId
                    })
                })
                    .then(response => response.json())
                    .then(data => {
                        // buraya log attigimda yazdiriyor diger yerlerde nedense yazdirmadi
                        console.log(data);
                        if (data?.Status == 400) {
                            check = false
                        } else {
                            check = true;
                        }

                        
                    })
                    .catch(error => {
                        var str = response.json();
                        console.log(str);
                        check = false;
                    });

                 if (check) {

                    await alert(`Added book with ID: ${bookId} to the cart for user with ID: ${userId}`);
                }

                isAddedToCart = false;
            } catch (error) {
                // Hata durumunda değişkeni false yap
                isAddedToCart = false;
                console.error(error);
            }
            
        }
        // Inside your script (outside of the generateBookCards function)
        async function viewDetailsClicked(bookId) {
            // Implement your logic to handle the details view here
            // For example, you can redirect to a details page or display a modal
            alert(`View details for book with ID: ${bookId}`);
        }

        // Get the cart link element
        const cartLink = document.getElementById('cart-link');

        // Add a click event listener to the cart link
        cartLink.addEventListener('click', function (event) {
            event.preventDefault(); // Prevent the default link behavior

            // Redirect to the shopping cart page
            window.location.href = '/Home/ShoppingCart';
        });

        // Fetch books when the page loads
        document.addEventListener('DOMContentLoaded', fetchBooks);

    </script>

    </body>
</html>
